### This file was generated by Nexus Schema
### Do not make changes to this file directly


input CreateOrganizationInput {
  address: String
  address_2: String
  city: String
  country: String
  email: String
  name: String
  primary_phone_number: String
  state: String
  zip: String
}

input CreatePropertyInput {
  address: String
  address_2: String
  city: String
  country: String
  name: String
  primary_phone_number: String
  state: String
  zip: String
}

input CreateUserInput {
  email: String
  first_name: String
  last_name: String
  password: String
  residence: String
  role: Role!
}

input CreateUserLogin {
  email: String
  password: String
}

type Mutation {
  changePassword(password: String, token: String): User!
  createProperty(property: CreatePropertyInput!): Property!
  deleteUser(user: UserWhereUniqueInput!): User!
  forgotPassword(email: String): Boolean!
  login(user: CreateUserLogin!): User!
  logout: Boolean!
  register(initial_org: CreateOrganizationInput!, user: CreateUserInput!): User!
  updateUser(user: CreateUserInput!, user_id: UserWhereUniqueInput!): User
}

type Organization {
  address: String!
  address_2: String!
  city: String!
  country: String!
  id: ID!
  name: String!

  """Returns all owned property by landlord through organization"""
  owned_properties: [Property!]!
  primary_phone_number: String!
  state: String!
  zip: String!
}

type Property {
  address: String!
  address_2: String!
  city: String!
  country: String!
  id: ID!
  name: String!
  primary_phone_number: String!
  state: String!
  zip: String!
}

type Query {
  getSelf: User
  getUser(where: UserWhereUniqueInput!): User
  getUserByEmail(user: UserWhereUniqueInputEmail!): User
  getUsers: [User]!
}

"""User Roles"""
enum Role {
  Owner
  Superintendent
  Tenant
}

type User {
  email: String!
  first_name: String!
  id: ID!
  last_name: String!

  """Returns all organizations user is affiliated to or owns"""
  organizations: Organization!

  """Returns place of residence for tenant"""
  residence: Property!
  role: String!
}

input UserWhereUniqueInput {
  id: ID!
}

input UserWhereUniqueInputEmail {
  email: String
}